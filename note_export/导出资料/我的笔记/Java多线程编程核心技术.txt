## 2.1 synchronized同步方法
> 可见，方法中的变量不存在非线程安全问题，永远都是线程安全的。这是方法内部的变量是私有的特性造成的。

> 关键字synchronized取得的锁都是对象锁，而不是把一段代码或方法（函数）当作锁，所以在上面的示例中，哪个线程先执行带synchronized关键字的方法，哪个线程就持有该方法所属对象的锁Lock，那么其他线程只能呈等待状态，前提是多个线程访问的是同一个对象。

> 另外需要牢牢记住“共享”这两个字，只有共享资源的读写访问才需要同步化，如果不是共享资源，那么根本就没有同步的必要。

> 从此示例可以看到，同步不能继承，所以还得在子类的方法中添加synchronized关键字


## 2.3 volatile关键字
> 学习多线程并发，要着重“外练互斥，内修可见”，这是掌握多线程、学习多线程并发的重要技术点。


# 第3章 线程间通信
> 线程是操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体。线程间的通信就是成为整体的必用方案之一，可以说，使线程间进行通信后，系统之间的交互性会更强大，在大大提高CPU利用率的同时还会使程序员对各线程任务在处理的过程中进行有效的把控与监督。


## 3.5 本章总结
> 本章的内容已经学习完毕。经过本章的学习，可以将以前分散的线程对象进行彼此的通信与协作，线程任务不再是单打独斗，更具有团结性，因为它们之间可以互相通信，就像命令官与执行者一样。对任务的计划规划更加合理，不再是随机的和盲目的了。


